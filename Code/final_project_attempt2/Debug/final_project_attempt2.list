
final_project_attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dbc  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b44  08004b44  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b4c  08004b4c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b50  08004b50  00014b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000014  08004b68  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08004b68  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083b9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175c  00000000  00000000  000283fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00029b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002a310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016139  00000000  00000000  0002aa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac2b  00000000  00000000  00040b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c20  00000000  00000000  0004b764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd4  00000000  00000000  000d13d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d70 	.word	0x08003d70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08003d70 	.word	0x08003d70

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b974 	b.w	8000dc4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468e      	mov	lr, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d969      	bls.n	8000bdc <__udivmoddi4+0xe8>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b152      	cbz	r2, 8000b24 <__udivmoddi4+0x30>
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	f1c2 0120 	rsb	r1, r2, #32
 8000b16:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b22:	4094      	lsls	r4, r2
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2e:	fa1f f78c 	uxth.w	r7, ip
 8000b32:	fb08 e316 	mls	r3, r8, r6, lr
 8000b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3a:	fb06 f107 	mul.w	r1, r6, r7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4a:	f080 811f 	bcs.w	8000d8c <__udivmoddi4+0x298>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 811c 	bls.w	8000d8c <__udivmoddi4+0x298>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb00 f707 	mul.w	r7, r0, r7
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x92>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b78:	f080 810a 	bcs.w	8000d90 <__udivmoddi4+0x29c>
 8000b7c:	42a7      	cmp	r7, r4
 8000b7e:	f240 8107 	bls.w	8000d90 <__udivmoddi4+0x29c>
 8000b82:	4464      	add	r4, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	1be4      	subs	r4, r4, r7
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	b11d      	cbz	r5, 8000b98 <__udivmoddi4+0xa4>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	e9c5 4300 	strd	r4, r3, [r5]
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xc2>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	f000 80ef 	beq.w	8000d86 <__udivmoddi4+0x292>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f683 	clz	r6, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d14a      	bne.n	8000c54 <__udivmoddi4+0x160>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd4>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80f9 	bhi.w	8000dba <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa4>
 8000bd6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xec>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 8092 	bne.w	8000d0e <__udivmoddi4+0x21a>
 8000bea:	eba1 010c 	sub.w	r1, r1, ip
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfe:	fb07 1113 	mls	r1, r7, r3, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb0e f003 	mul.w	r0, lr, r3
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x12c>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x12a>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2c0>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x156>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x154>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2ca>
 8000c48:	4608      	mov	r0, r1
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c52:	e79c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000c54:	f1c6 0720 	rsb	r7, r6, #32
 8000c58:	40b3      	lsls	r3, r6
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f407 	lsr.w	r4, r0, r7
 8000c66:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	40f9      	lsrs	r1, r7
 8000c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c72:	fa00 f306 	lsl.w	r3, r0, r6
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	0c20      	lsrs	r0, r4, #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fb09 1118 	mls	r1, r9, r8, r1
 8000c84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c88:	fb08 f00e 	mul.w	r0, r8, lr
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b8>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	458e      	cmp	lr, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1e2>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2b4>
 8000cce:	458e      	cmp	lr, r1
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2b4>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cda:	fba0 9402 	umull	r9, r4, r0, r2
 8000cde:	eba1 010e 	sub.w	r1, r1, lr
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46a6      	mov	lr, r4
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x2a4>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x2a0>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x212>
 8000cee:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfe:	40f1      	lsrs	r1, r6
 8000d00:	431f      	orrs	r7, r3
 8000d02:	e9c5 7100 	strd	r7, r1, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	40d8      	lsrs	r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d30:	0c0b      	lsrs	r3, r1, #16
 8000d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d36:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x260>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b8>
 8000d4c:	429e      	cmp	r6, r3
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b8>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1b9b      	subs	r3, r3, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb06 f30e 	mul.w	r3, r6, lr
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x28a>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d7a:	3e02      	subs	r6, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0x104>
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e705      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e3      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6f8      	b.n	8000b86 <__udivmoddi4+0x92>
 8000d94:	454b      	cmp	r3, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f8>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f8>
 8000da4:	4646      	mov	r6, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x28a>
 8000da8:	4620      	mov	r0, r4
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1e2>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x260>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b8>
 8000db4:	3b02      	subs	r3, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x12c>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e709      	b.n	8000bd2 <__udivmoddi4+0xde>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x156>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <init_gpio_pwmpin>:
description: function to initialise PWM output pin
parameters: none
returns: none
 */
void init_gpio_pwmpin(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable clock for GPIO Port B
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <init_gpio_pwmpin+0x58>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <init_gpio_pwmpin+0x58>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PB9 as an alternate function output
    GPIOB->MODER |= GPIO_MODER_MODE9_1; // Set to alternate function mode
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000dde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000de2:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] |= (2 << GPIO_AFRH_AFSEL9_Pos); // Set alternate function to AF2 (TIM4_CH4)
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	6253      	str	r3, [r2, #36]	; 0x24

    // Set output type to push-pull
    GPIOB->OTYPER &= ~(GPIO_OTYPER_OT9);
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000df6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dfa:	6053      	str	r3, [r2, #4]

    // Set output speed to high
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED9;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000e02:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000e06:	6093      	str	r3, [r2, #8]

    // Set initial output to low
    GPIOB->BSRR |= GPIO_BSRR_BR9;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <init_gpio_pwmpin+0x5c>)
 8000e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e12:	6193      	str	r3, [r2, #24]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400

08000e28 <init_motor_pins>:
description: function to initialise gpio pins for motor direction control
parameters: none
returns: none
 */
void init_motor_pins(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <init_motor_pins+0x70>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <init_motor_pins+0x70>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30

    // Set PB12 and PB13 as outputs
    GPIOB->MODER |= GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_0;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <init_motor_pins+0x74>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <init_motor_pins+0x74>)
 8000e3e:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000e42:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(GPIO_MODER_MODE12_1 | GPIO_MODER_MODE13_1);
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <init_motor_pins+0x74>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <init_motor_pins+0x74>)
 8000e4a:	f023 6320 	bic.w	r3, r3, #167772160	; 0xa000000
 8000e4e:	6013      	str	r3, [r2, #0]

    // Set output type to push-pull
    GPIOB->OTYPER &= ~(GPIO_OTYPER_OT12 | GPIO_OTYPER_OT13);
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <init_motor_pins+0x74>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <init_motor_pins+0x74>)
 8000e56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e5a:	6053      	str	r3, [r2, #4]

    // Set output speed to high
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED12 | GPIO_OSPEEDR_OSPEED13;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <init_motor_pins+0x74>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <init_motor_pins+0x74>)
 8000e62:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000e66:	6093      	str	r3, [r2, #8]

    // Set PB12 and PB13 initial output to low
    GPIOB->BSRR |= GPIO_BSRR_BR12 | GPIO_BSRR_BR13;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <init_motor_pins+0x74>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <init_motor_pins+0x74>)
 8000e6e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000e72:	6193      	str	r3, [r2, #24]

    // Set in1 to high and in2 to low
    GPIOB->BSRR |= GPIO_BSRR_BS12;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <init_motor_pins+0x74>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <init_motor_pins+0x74>)
 8000e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7e:	6193      	str	r3, [r2, #24]
    GPIOB->BSRR &= ~(GPIO_BSRR_BS13);
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <init_motor_pins+0x74>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <init_motor_pins+0x74>)
 8000e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e8a:	6193      	str	r3, [r2, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <init_pwm_timer>:
name: init_pwm_timer
description: function to intiliase pwm
parameters: none
returns: none
 */void init_pwm_timer(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
	// Enable clock for TIM4
	RCC->APB1ENR  |= RCC_APB1ENR_TIM4EN;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <init_pwm_timer+0x64>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <init_pwm_timer+0x64>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40

	// Set the prescaler value to achieve10 KHz freq with system clock of 84 MHz
	//PSC = (48 MHz / 10 kHz) - 1 = 4799
	TIM4->PSC = 4799;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <init_pwm_timer+0x68>)
 8000eb2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28

	// Set the auto-reload value to achieve a frequency of 10 kHz
	//ARR = (48 MHz / (10 kHz * (4799 + 1))) - 1 = 999
	//PWM frequency = (system clock frequency) / (prescaler x (arr + 1))
	//frequency is determined by the arr register
	TIM4->ARR = 999;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <init_pwm_timer+0x68>)
 8000eba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the duty cycle using CCR4 register
	TIM4->CCR4 = duty_cycle;
 8000ec0:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <init_pwm_timer+0x68>)
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <init_pwm_timer+0x6c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40

	// Set output mode to PWM mode 1
	TIM4->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <init_pwm_timer+0x68>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <init_pwm_timer+0x68>)
 8000ece:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000ed2:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 &= ~(TIM_CCMR2_OC4M_0);
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <init_pwm_timer+0x68>)
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <init_pwm_timer+0x68>)
 8000eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ede:	61d3      	str	r3, [r2, #28]

	// Enable output for channel 4
	TIM4->CCER |= TIM_CCER_CC4E;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <init_pwm_timer+0x68>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <init_pwm_timer+0x68>)
 8000ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eea:	6213      	str	r3, [r2, #32]

	// Enable counter for TIM4
	TIM4->CR1 |= TIM_CR1_CEN;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <init_pwm_timer+0x68>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <init_pwm_timer+0x68>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40000800 	.word	0x40000800
 8000f0c:	200000e4 	.word	0x200000e4

08000f10 <init_led>:
description: function to initialise pin for led
parameters: none
returns: none
 */
void init_led(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
    // Enable the GPIOA clock
	RCC->AHB1ENR |= RCC_GPIOA_EN;
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <init_led+0x34>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <init_led+0x34>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30

    // Set the PA5 mode of the GPIO pin as output
    GPIOA->MODER |= GPIOA_P0_OUTPUT;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <init_led+0x38>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <init_led+0x38>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]

    // Turn off the LED initially
    GPIOA->BSRR |= LED_BSRR_OFF;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <init_led+0x38>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <init_led+0x38>)
 8000f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f36:	6193      	str	r3, [r2, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	00000000 	.word	0x00000000

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f000 fed7 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5a:	f000 f97f 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5e:	f000 fa41 	bl	80013e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f62:	f000 f9e3 	bl	800132c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f66:	f000 fa0f 	bl	8001388 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* initialse pwm, motor direction pins, led and ssd1306 */
  init_gpio_pwmpin();
 8000f6a:	f7ff ff2d 	bl	8000dc8 <init_gpio_pwmpin>
  init_pwm_timer();
 8000f6e:	f7ff ff97 	bl	8000ea0 <init_pwm_timer>
  init_motor_pins();
 8000f72:	f7ff ff59 	bl	8000e28 <init_motor_pins>
  init_led();
 8000f76:	f7ff ffcb 	bl	8000f10 <init_led>
  SSD1306_Init(); //initialising display
 8000f7a:	f000 faf1 	bl	8001560 <SSD1306_Init>

  //display startup message and led startup sequence
  SSD1306_GotoXY(0,0);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 fc5f 	bl	8001844 <SSD1306_GotoXY>
  SSD1306_Puts("SMART FAN",&Font_11x18,1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	49a3      	ldr	r1, [pc, #652]	; (8001218 <main+0x2c8>)
 8000f8a:	48a4      	ldr	r0, [pc, #656]	; (800121c <main+0x2cc>)
 8000f8c:	f000 fcf0 	bl	8001970 <SSD1306_Puts>
  SSD1306_GotoXY(0,30);
 8000f90:	211e      	movs	r1, #30
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 fc56 	bl	8001844 <SSD1306_GotoXY>
  SSD1306_Puts("CONTROL SYSTEM",&Font_11x18,1);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	499f      	ldr	r1, [pc, #636]	; (8001218 <main+0x2c8>)
 8000f9c:	48a0      	ldr	r0, [pc, #640]	; (8001220 <main+0x2d0>)
 8000f9e:	f000 fce7 	bl	8001970 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //update display on OLED
 8000fa2:	f000 fba9 	bl	80016f8 <SSD1306_UpdateScreen>

  GPIOA->BSRR |= LED_BSRR_ON;
 8000fa6:	4b9f      	ldr	r3, [pc, #636]	; (8001224 <main+0x2d4>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a9e      	ldr	r2, [pc, #632]	; (8001224 <main+0x2d4>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6193      	str	r3, [r2, #24]
  HAL_Delay(500);
 8000fb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb6:	f000 ff19 	bl	8001dec <HAL_Delay>
  GPIOA->BSRR |= LED_BSRR_OFF;
 8000fba:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <main+0x2d4>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a99      	ldr	r2, [pc, #612]	; (8001224 <main+0x2d4>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6193      	str	r3, [r2, #24]
  HAL_Delay(500);
 8000fc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fca:	f000 ff0f 	bl	8001dec <HAL_Delay>
  GPIOA->BSRR |= LED_BSRR_ON;
 8000fce:	4b95      	ldr	r3, [pc, #596]	; (8001224 <main+0x2d4>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4a94      	ldr	r2, [pc, #592]	; (8001224 <main+0x2d4>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6193      	str	r3, [r2, #24]
  HAL_Delay(500);
 8000fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fde:	f000 ff05 	bl	8001dec <HAL_Delay>
  GPIOA->BSRR |= LED_BSRR_OFF;
 8000fe2:	4b90      	ldr	r3, [pc, #576]	; (8001224 <main+0x2d4>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a8f      	ldr	r2, [pc, #572]	; (8001224 <main+0x2d4>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6193      	str	r3, [r2, #24]

  SSD1306_ScrollRight(0x00,0x0f); //scroll right entire screen using pages
 8000fee:	210f      	movs	r1, #15
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 fa40 	bl	8001476 <SSD1306_ScrollRight>
  HAL_Delay(2000); //2 sec
 8000ff6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ffa:	f000 fef7 	bl	8001dec <HAL_Delay>

  SSD1306_ScrollLeft(0x00,0x0f); //scroll left entire screen using pages
 8000ffe:	210f      	movs	r1, #15
 8001000:	2000      	movs	r0, #0
 8001002:	f000 fa6e 	bl	80014e2 <SSD1306_ScrollLeft>
  HAL_Delay(2000); //2 sec
 8001006:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800100a:	f000 feef 	bl	8001dec <HAL_Delay>

  SSD1306_Stopscroll();
 800100e:	f000 fa9e 	bl	800154e <SSD1306_Stopscroll>
  SSD1306_Clear();
 8001012:	f000 fcd2 	bl	80019ba <SSD1306_Clear>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //SET CONFIG REG AND CONVERSION REG OF ADC
	  ADCwrite[0] = 0x01; // CONVERION REG=00, CONFIG REG =01
 8001016:	4b84      	ldr	r3, [pc, #528]	; (8001228 <main+0x2d8>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
	  ADCwrite[1]=0xC1; //REGISTER FIELDS: os-1,mux-100,pga,000,mode-1 (11000001) msbs
 800101c:	4b82      	ldr	r3, [pc, #520]	; (8001228 <main+0x2d8>)
 800101e:	22c1      	movs	r2, #193	; 0xc1
 8001020:	705a      	strb	r2, [r3, #1]
	  ADCwrite[2]= 0x83; // REGISTER FIELDS: dr-default-100,comp-alldefault 00011 (10000011)
 8001022:	4b81      	ldr	r3, [pc, #516]	; (8001228 <main+0x2d8>)
 8001024:	2283      	movs	r2, #131	; 0x83
 8001026:	709a      	strb	r2, [r3, #2]
	  HAL_I2C_Master_Transmit(&hi2c2,SLAVE_ADDRESS<<1,ADCwrite,3,100); //hal I2C transmit with timeout=100ms
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2303      	movs	r3, #3
 800102e:	4a7e      	ldr	r2, [pc, #504]	; (8001228 <main+0x2d8>)
 8001030:	2190      	movs	r1, #144	; 0x90
 8001032:	487e      	ldr	r0, [pc, #504]	; (800122c <main+0x2dc>)
 8001034:	f001 faac 	bl	8002590 <HAL_I2C_Master_Transmit>

	  //retrieve data from conversion reg
	  ADCwrite[0] = 0x00; // CONVERION REG=00, CONFIG REG =01
 8001038:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <main+0x2d8>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c2,SLAVE_ADDRESS<<1,ADCwrite,1,100); //hal I2C transmit with timeout=100ms
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	4a78      	ldr	r2, [pc, #480]	; (8001228 <main+0x2d8>)
 8001046:	2190      	movs	r1, #144	; 0x90
 8001048:	4878      	ldr	r0, [pc, #480]	; (800122c <main+0x2dc>)
 800104a:	f001 faa1 	bl	8002590 <HAL_I2C_Master_Transmit>
	  HAL_Delay(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f000 fecc 	bl	8001dec <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c2,SLAVE_ADDRESS<<1,ADCwrite,2,100); //hal I2C receive with timeout=100ms
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2302      	movs	r3, #2
 800105a:	4a73      	ldr	r2, [pc, #460]	; (8001228 <main+0x2d8>)
 800105c:	2190      	movs	r1, #144	; 0x90
 800105e:	4873      	ldr	r0, [pc, #460]	; (800122c <main+0x2dc>)
 8001060:	f001 fb94 	bl	800278c <HAL_I2C_Master_Receive>

	  //conversion to voltage, TAKING 8 BITS SHIFTING, OTHER sequentially
	  reading_from_pot = (ADCwrite[0]<<8 | ADCwrite[1]);
 8001064:	4b70      	ldr	r3, [pc, #448]	; (8001228 <main+0x2d8>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b6e      	ldr	r3, [pc, #440]	; (8001228 <main+0x2d8>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b6e      	ldr	r3, [pc, #440]	; (8001230 <main+0x2e0>)
 8001078:	801a      	strh	r2, [r3, #0]
	  if (reading_from_pot<0)
 800107a:	4b6d      	ldr	r3, [pc, #436]	; (8001230 <main+0x2e0>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	2b00      	cmp	r3, #0
 8001082:	da02      	bge.n	800108a <main+0x13a>
	  {
		  reading_from_pot=0;// truncating the negative values just incase
 8001084:	4b6a      	ldr	r3, [pc, #424]	; (8001230 <main+0x2e0>)
 8001086:	2200      	movs	r2, #0
 8001088:	801a      	strh	r2, [r3, #0]
	  }

	  //converted voltage value
	  voltage_from_pot = reading_from_pot * voltage_conversion; //MAX VALUE 4.75, MIN VALUE 0.0
 800108a:	4b69      	ldr	r3, [pc, #420]	; (8001230 <main+0x2e0>)
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001234 <main+0x2e4>
 800109c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a0:	4b65      	ldr	r3, [pc, #404]	; (8001238 <main+0x2e8>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]

	  //pwm duty cycle updation
	  duty_cycle = (uint32_t)(voltage_from_pot * 1000 / 4.75);
 80010a6:	4b64      	ldr	r3, [pc, #400]	; (8001238 <main+0x2e8>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800123c <main+0x2ec>
 80010b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b4:	ee17 0a90 	vmov	r0, s15
 80010b8:	f7ff f9f2 	bl	80004a0 <__aeabi_f2d>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b5f      	ldr	r3, [pc, #380]	; (8001240 <main+0x2f0>)
 80010c2:	f7ff fb6f 	bl	80007a4 <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fcd9 	bl	8000a84 <__aeabi_d2uiz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a5b      	ldr	r2, [pc, #364]	; (8001244 <main+0x2f4>)
 80010d6:	6013      	str	r3, [r2, #0]
	  TIM4->CCR4 = duty_cycle;
 80010d8:	4a5b      	ldr	r2, [pc, #364]	; (8001248 <main+0x2f8>)
 80010da:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <main+0x2f4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6413      	str	r3, [r2, #64]	; 0x40

	  if(voltage_from_pot>0.2)
 80010e0:	4b55      	ldr	r3, [pc, #340]	; (8001238 <main+0x2e8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f9db 	bl	80004a0 <__aeabi_f2d>
 80010ea:	a349      	add	r3, pc, #292	; (adr r3, 8001210 <main+0x2c0>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff fcbe 	bl	8000a70 <__aeabi_dcmpgt>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <main+0x1b8>
	  {
		    GPIOA->BSRR |= LED_BSRR_ON; //fan on
 80010fa:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <main+0x2d4>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a49      	ldr	r2, [pc, #292]	; (8001224 <main+0x2d4>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6193      	str	r3, [r2, #24]
 8001106:	e005      	b.n	8001114 <main+0x1c4>
	  }
	  else
	  {
		    GPIOA->BSRR |= LED_BSRR_OFF; //fan off
 8001108:	4b46      	ldr	r3, [pc, #280]	; (8001224 <main+0x2d4>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a45      	ldr	r2, [pc, #276]	; (8001224 <main+0x2d4>)
 800110e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001112:	6193      	str	r3, [r2, #24]
	  }

	  if((voltage_from_pot>2.5)&&(voltage_from_pot<4.5))
 8001114:	4b48      	ldr	r3, [pc, #288]	; (8001238 <main+0x2e8>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800111e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd1b      	ble.n	8001160 <main+0x210>
 8001128:	4b43      	ldr	r3, [pc, #268]	; (8001238 <main+0x2e8>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8001132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	d511      	bpl.n	8001160 <main+0x210>
	  {
		    SSD1306_GotoXY(0,0);
 800113c:	2100      	movs	r1, #0
 800113e:	2000      	movs	r0, #0
 8001140:	f000 fb80 	bl	8001844 <SSD1306_GotoXY>
		    SSD1306_Puts("SPEED: 2",&Font_11x18,1);
 8001144:	2201      	movs	r2, #1
 8001146:	4934      	ldr	r1, [pc, #208]	; (8001218 <main+0x2c8>)
 8001148:	4840      	ldr	r0, [pc, #256]	; (800124c <main+0x2fc>)
 800114a:	f000 fc11 	bl	8001970 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //update display on OLED
 800114e:	f000 fad3 	bl	80016f8 <SSD1306_UpdateScreen>
		    HAL_Delay(500);
 8001152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001156:	f000 fe49 	bl	8001dec <HAL_Delay>
		    SSD1306_Clear();
 800115a:	f000 fc2e 	bl	80019ba <SSD1306_Clear>
 800115e:	e055      	b.n	800120c <main+0x2bc>

	  }
	  else if(voltage_from_pot>4.5)
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <main+0x2e8>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 800116a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001172:	dd11      	ble.n	8001198 <main+0x248>
	  {
		    SSD1306_GotoXY(0,0);
 8001174:	2100      	movs	r1, #0
 8001176:	2000      	movs	r0, #0
 8001178:	f000 fb64 	bl	8001844 <SSD1306_GotoXY>
		    SSD1306_Puts("MAX SPEED",&Font_11x18,1);
 800117c:	2201      	movs	r2, #1
 800117e:	4926      	ldr	r1, [pc, #152]	; (8001218 <main+0x2c8>)
 8001180:	4833      	ldr	r0, [pc, #204]	; (8001250 <main+0x300>)
 8001182:	f000 fbf5 	bl	8001970 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //update display on OLED
 8001186:	f000 fab7 	bl	80016f8 <SSD1306_UpdateScreen>
		    HAL_Delay(500);
 800118a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800118e:	f000 fe2d 	bl	8001dec <HAL_Delay>
		    SSD1306_Clear();
 8001192:	f000 fc12 	bl	80019ba <SSD1306_Clear>
 8001196:	e73e      	b.n	8001016 <main+0xc6>

	  }
	  else if((voltage_from_pot>0.2)&&(voltage_from_pot<2.5))
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <main+0x2e8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f97f 	bl	80004a0 <__aeabi_f2d>
 80011a2:	a31b      	add	r3, pc, #108	; (adr r3, 8001210 <main+0x2c0>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fc62 	bl	8000a70 <__aeabi_dcmpgt>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01b      	beq.n	80011ea <main+0x29a>
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <main+0x2e8>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80011bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	d511      	bpl.n	80011ea <main+0x29a>
	  {
		    SSD1306_GotoXY(0,0);
 80011c6:	2100      	movs	r1, #0
 80011c8:	2000      	movs	r0, #0
 80011ca:	f000 fb3b 	bl	8001844 <SSD1306_GotoXY>
		    SSD1306_Puts("SPEED: 1",&Font_11x18,1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	4911      	ldr	r1, [pc, #68]	; (8001218 <main+0x2c8>)
 80011d2:	4820      	ldr	r0, [pc, #128]	; (8001254 <main+0x304>)
 80011d4:	f000 fbcc 	bl	8001970 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //update display on OLED
 80011d8:	f000 fa8e 	bl	80016f8 <SSD1306_UpdateScreen>
		    HAL_Delay(500);
 80011dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e0:	f000 fe04 	bl	8001dec <HAL_Delay>
		    SSD1306_Clear();
 80011e4:	f000 fbe9 	bl	80019ba <SSD1306_Clear>
 80011e8:	e010      	b.n	800120c <main+0x2bc>
	  }
	  else
	  {
		    SSD1306_GotoXY(0,0);
 80011ea:	2100      	movs	r1, #0
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 fb29 	bl	8001844 <SSD1306_GotoXY>
		    SSD1306_Puts("FAN OFF",&Font_11x18,1);
 80011f2:	2201      	movs	r2, #1
 80011f4:	4908      	ldr	r1, [pc, #32]	; (8001218 <main+0x2c8>)
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <main+0x308>)
 80011f8:	f000 fbba 	bl	8001970 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //update display on OLED
 80011fc:	f000 fa7c 	bl	80016f8 <SSD1306_UpdateScreen>
		    HAL_Delay(500);
 8001200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001204:	f000 fdf2 	bl	8001dec <HAL_Delay>
		    SSD1306_Clear();
 8001208:	f000 fbd7 	bl	80019ba <SSD1306_Clear>
	  ADCwrite[0] = 0x01; // CONVERION REG=00, CONFIG REG =01
 800120c:	e703      	b.n	8001016 <main+0xc6>
 800120e:	bf00      	nop
 8001210:	9999999a 	.word	0x9999999a
 8001214:	3fc99999 	.word	0x3fc99999
 8001218:	20000000 	.word	0x20000000
 800121c:	08003d88 	.word	0x08003d88
 8001220:	08003d94 	.word	0x08003d94
 8001224:	40020000 	.word	0x40020000
 8001228:	200000d8 	.word	0x200000d8
 800122c:	20000084 	.word	0x20000084
 8001230:	200000de 	.word	0x200000de
 8001234:	3943a5e3 	.word	0x3943a5e3
 8001238:	200000e0 	.word	0x200000e0
 800123c:	447a0000 	.word	0x447a0000
 8001240:	40130000 	.word	0x40130000
 8001244:	200000e4 	.word	0x200000e4
 8001248:	40000800 	.word	0x40000800
 800124c:	08003da4 	.word	0x08003da4
 8001250:	08003db0 	.word	0x08003db0
 8001254:	08003dbc 	.word	0x08003dbc
 8001258:	08003dc8 	.word	0x08003dc8

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	; 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	2230      	movs	r2, #48	; 0x30
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fd78 	bl	8003d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <SystemClock_Config+0xc8>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <SystemClock_Config+0xc8>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	; 0x40
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <SystemClock_Config+0xc8>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <SystemClock_Config+0xcc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a20      	ldr	r2, [pc, #128]	; (8001328 <SystemClock_Config+0xcc>)
 80012a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <SystemClock_Config+0xcc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012bc:	2301      	movs	r3, #1
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c0:	2310      	movs	r3, #16
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c4:	2302      	movs	r3, #2
 80012c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012cc:	2308      	movs	r3, #8
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80012d0:	2360      	movs	r3, #96	; 0x60
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d8:	2304      	movs	r3, #4
 80012da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 f8d5 	bl	8003490 <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012ec:	f000 f8be 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001300:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001304:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2101      	movs	r1, #1
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fb37 	bl	8003980 <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001318:	f000 f8a8 	bl	800146c <Error_Handler>
  }
}
 800131c:	bf00      	nop
 800131e:	3750      	adds	r7, #80	; 0x50
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <MX_I2C1_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_I2C1_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_I2C1_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_I2C1_Init+0x50>)
 800136a:	f000 ffcd 	bl	8002308 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 f87a 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000030 	.word	0x20000030
 8001380:	40005400 	.word	0x40005400
 8001384:	00061a80 	.word	0x00061a80

08001388 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_I2C2_Init+0x50>)
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <MX_I2C2_Init+0x54>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_I2C2_Init+0x50>)
 8001394:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_I2C2_Init+0x58>)
 8001396:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013c6:	f000 ff9f 	bl	8002308 <HAL_I2C_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013d0:	f000 f84c 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000084 	.word	0x20000084
 80013dc:	40005800 	.word	0x40005800
 80013e0:	00061a80 	.word	0x00061a80

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <MX_GPIO_Init+0x84>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <MX_GPIO_Init+0x84>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_GPIO_Init+0x84>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_GPIO_Init+0x84>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <MX_GPIO_Init+0x84>)
 8001410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_GPIO_Init+0x84>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MX_GPIO_Init+0x84>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <MX_GPIO_Init+0x84>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <MX_GPIO_Init+0x84>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_GPIO_Init+0x84>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <MX_GPIO_Init+0x84>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_GPIO_Init+0x84>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>

08001476 <SSD1306_ScrollRight>:
description: function to scroll right for fixed rows
parameters: start row, end row
returns: none
 */
void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	460a      	mov	r2, r1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	4613      	mov	r3, r2
 8001484:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8001486:	2226      	movs	r2, #38	; 0x26
 8001488:	2100      	movs	r1, #0
 800148a:	2078      	movs	r0, #120	; 0x78
 800148c:	f000 fb04 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2078      	movs	r0, #120	; 0x78
 8001496:	f000 faff 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	461a      	mov	r2, r3
 800149e:	2100      	movs	r1, #0
 80014a0:	2078      	movs	r0, #120	; 0x78
 80014a2:	f000 faf9 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2078      	movs	r0, #120	; 0x78
 80014ac:	f000 faf4 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	461a      	mov	r2, r3
 80014b4:	2100      	movs	r1, #0
 80014b6:	2078      	movs	r0, #120	; 0x78
 80014b8:	f000 faee 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2078      	movs	r0, #120	; 0x78
 80014c2:	f000 fae9 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80014c6:	22ff      	movs	r2, #255	; 0xff
 80014c8:	2100      	movs	r1, #0
 80014ca:	2078      	movs	r0, #120	; 0x78
 80014cc:	f000 fae4 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80014d0:	222f      	movs	r2, #47	; 0x2f
 80014d2:	2100      	movs	r1, #0
 80014d4:	2078      	movs	r0, #120	; 0x78
 80014d6:	f000 fadf 	bl	8001a98 <ssd1306_I2C_Write>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <SSD1306_ScrollLeft>:
description: function to scroll left for fixed rows
parameters: start row, end row
returns: none
 */
void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	460a      	mov	r2, r1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	4613      	mov	r3, r2
 80014f0:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80014f2:	2227      	movs	r2, #39	; 0x27
 80014f4:	2100      	movs	r1, #0
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f000 face 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2078      	movs	r0, #120	; 0x78
 8001502:	f000 fac9 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	461a      	mov	r2, r3
 800150a:	2100      	movs	r1, #0
 800150c:	2078      	movs	r0, #120	; 0x78
 800150e:	f000 fac3 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2078      	movs	r0, #120	; 0x78
 8001518:	f000 fabe 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	461a      	mov	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	2078      	movs	r0, #120	; 0x78
 8001524:	f000 fab8 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2078      	movs	r0, #120	; 0x78
 800152e:	f000 fab3 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001532:	22ff      	movs	r2, #255	; 0xff
 8001534:	2100      	movs	r1, #0
 8001536:	2078      	movs	r0, #120	; 0x78
 8001538:	f000 faae 	bl	8001a98 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800153c:	222f      	movs	r2, #47	; 0x2f
 800153e:	2100      	movs	r1, #0
 8001540:	2078      	movs	r0, #120	; 0x78
 8001542:	f000 faa9 	bl	8001a98 <ssd1306_I2C_Write>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <SSD1306_Stopscroll>:
description: function to stop scrolling on the screen
parameters: none
returns: none
 */
void SSD1306_Stopscroll(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001552:	222e      	movs	r2, #46	; 0x2e
 8001554:	2100      	movs	r1, #0
 8001556:	2078      	movs	r0, #120	; 0x78
 8001558:	f000 fa9e 	bl	8001a98 <ssd1306_I2C_Write>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <SSD1306_Init>:
name: SSD1306_Init
description: function to initialize SSD1306 LCD
parameters: none
returns: 0 if I2c port not detected for oled, 1 if init done
 */
uint8_t SSD1306_Init(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

	/* delay */
	uint32_t p = 250000;
 8001566:	4b61      	ldr	r3, [pc, #388]	; (80016ec <SSD1306_Init+0x18c>)
 8001568:	607b      	str	r3, [r7, #4]
	while(p>0)
 800156a:	e002      	b.n	8001572 <SSD1306_Init+0x12>
		p--;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f9      	bne.n	800156c <SSD1306_Init+0xc>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001578:	f644 6320 	movw	r3, #20000	; 0x4e20
 800157c:	2201      	movs	r2, #1
 800157e:	2178      	movs	r1, #120	; 0x78
 8001580:	485b      	ldr	r0, [pc, #364]	; (80016f0 <SSD1306_Init+0x190>)
 8001582:	f001 fb29 	bl	8002bd8 <HAL_I2C_IsDeviceReady>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SSD1306_Init+0x30>
		/* Return false if lcd not found at the port */
		return 0;
 800158c:	2300      	movs	r3, #0
 800158e:	e0a9      	b.n	80016e4 <SSD1306_Init+0x184>
	}
	
	/*delay */
	uint32_t g = 2500;
 8001590:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001594:	603b      	str	r3, [r7, #0]
	while(g>0)
 8001596:	e002      	b.n	800159e <SSD1306_Init+0x3e>
		g--;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3b01      	subs	r3, #1
 800159c:	603b      	str	r3, [r7, #0]
	while(g>0)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f9      	bne.n	8001598 <SSD1306_Init+0x38>
	
	/* Init LCD based on commands from the datasheet */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80015a4:	22ae      	movs	r2, #174	; 0xae
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fa75 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80015ae:	2220      	movs	r2, #32
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fa70 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80015b8:	2210      	movs	r2, #16
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	; 0x78
 80015be:	f000 fa6b 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015c2:	22b0      	movs	r2, #176	; 0xb0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	; 0x78
 80015c8:	f000 fa66 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80015cc:	22c8      	movs	r2, #200	; 0xc8
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	; 0x78
 80015d2:	f000 fa61 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 fa5c 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80015e0:	2210      	movs	r2, #16
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f000 fa57 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 fa52 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015f4:	2281      	movs	r2, #129	; 0x81
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	; 0x78
 80015fa:	f000 fa4d 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	; 0x78
 8001604:	f000 fa48 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001608:	22a1      	movs	r2, #161	; 0xa1
 800160a:	2100      	movs	r1, #0
 800160c:	2078      	movs	r0, #120	; 0x78
 800160e:	f000 fa43 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001612:	22a6      	movs	r2, #166	; 0xa6
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	; 0x78
 8001618:	f000 fa3e 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800161c:	22a8      	movs	r2, #168	; 0xa8
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	; 0x78
 8001622:	f000 fa39 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001626:	223f      	movs	r2, #63	; 0x3f
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 fa34 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001630:	22a4      	movs	r2, #164	; 0xa4
 8001632:	2100      	movs	r1, #0
 8001634:	2078      	movs	r0, #120	; 0x78
 8001636:	f000 fa2f 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800163a:	22d3      	movs	r2, #211	; 0xd3
 800163c:	2100      	movs	r1, #0
 800163e:	2078      	movs	r0, #120	; 0x78
 8001640:	f000 fa2a 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2078      	movs	r0, #120	; 0x78
 800164a:	f000 fa25 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800164e:	22d5      	movs	r2, #213	; 0xd5
 8001650:	2100      	movs	r1, #0
 8001652:	2078      	movs	r0, #120	; 0x78
 8001654:	f000 fa20 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001658:	22f0      	movs	r2, #240	; 0xf0
 800165a:	2100      	movs	r1, #0
 800165c:	2078      	movs	r0, #120	; 0x78
 800165e:	f000 fa1b 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001662:	22d9      	movs	r2, #217	; 0xd9
 8001664:	2100      	movs	r1, #0
 8001666:	2078      	movs	r0, #120	; 0x78
 8001668:	f000 fa16 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800166c:	2222      	movs	r2, #34	; 0x22
 800166e:	2100      	movs	r1, #0
 8001670:	2078      	movs	r0, #120	; 0x78
 8001672:	f000 fa11 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001676:	22da      	movs	r2, #218	; 0xda
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	; 0x78
 800167c:	f000 fa0c 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001680:	2212      	movs	r2, #18
 8001682:	2100      	movs	r1, #0
 8001684:	2078      	movs	r0, #120	; 0x78
 8001686:	f000 fa07 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800168a:	22db      	movs	r2, #219	; 0xdb
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	; 0x78
 8001690:	f000 fa02 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001694:	2220      	movs	r2, #32
 8001696:	2100      	movs	r1, #0
 8001698:	2078      	movs	r0, #120	; 0x78
 800169a:	f000 f9fd 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800169e:	228d      	movs	r2, #141	; 0x8d
 80016a0:	2100      	movs	r1, #0
 80016a2:	2078      	movs	r0, #120	; 0x78
 80016a4:	f000 f9f8 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80016a8:	2214      	movs	r2, #20
 80016aa:	2100      	movs	r1, #0
 80016ac:	2078      	movs	r0, #120	; 0x78
 80016ae:	f000 f9f3 	bl	8001a98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80016b2:	22af      	movs	r2, #175	; 0xaf
 80016b4:	2100      	movs	r1, #0
 80016b6:	2078      	movs	r0, #120	; 0x78
 80016b8:	f000 f9ee 	bl	8001a98 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL); //stop scroll
 80016bc:	222e      	movs	r2, #46	; 0x2e
 80016be:	2100      	movs	r1, #0
 80016c0:	2078      	movs	r0, #120	; 0x78
 80016c2:	f000 f9e9 	bl	8001a98 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f844 	bl	8001754 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80016cc:	f000 f814 	bl	80016f8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <SSD1306_Init+0x194>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <SSD1306_Init+0x194>)
 80016d8:	2200      	movs	r2, #0
 80016da:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SSD1306_Init+0x194>)
 80016de:	2201      	movs	r2, #1
 80016e0:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	0003d090 	.word	0x0003d090
 80016f0:	20000030 	.word	0x20000030
 80016f4:	200004e8 	.word	0x200004e8

080016f8 <SSD1306_UpdateScreen>:
name: SSD1306_UpdateScreen
description: function to update the SS1306 buffer from internal RAM to OLED
parameters: none
returns: none
 */
void SSD1306_UpdateScreen(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80016fe:	2300      	movs	r3, #0
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	e01d      	b.n	8001740 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	3b50      	subs	r3, #80	; 0x50
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	; 0x78
 8001710:	f000 f9c2 	bl	8001a98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2078      	movs	r0, #120	; 0x78
 800171a:	f000 f9bd 	bl	8001a98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800171e:	2210      	movs	r2, #16
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	; 0x78
 8001724:	f000 f9b8 	bl	8001a98 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	01db      	lsls	r3, r3, #7
 800172c:	4a08      	ldr	r2, [pc, #32]	; (8001750 <SSD1306_UpdateScreen+0x58>)
 800172e:	441a      	add	r2, r3
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	2078      	movs	r0, #120	; 0x78
 8001736:	f000 f949 	bl	80019cc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	3301      	adds	r3, #1
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b07      	cmp	r3, #7
 8001744:	d9de      	bls.n	8001704 <SSD1306_UpdateScreen+0xc>
	}
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200000e8 	.word	0x200000e8

08001754 <SSD1306_Fill>:
name: SSD1306_Fill
description: function to fill the screen with a colour
parameters: color from the enum to be filled (black/white)
returns: none
 */
void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <SSD1306_Fill+0x14>
 8001764:	2300      	movs	r3, #0
 8001766:	e000      	b.n	800176a <SSD1306_Fill+0x16>
 8001768:	23ff      	movs	r3, #255	; 0xff
 800176a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176e:	4619      	mov	r1, r3
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <SSD1306_Fill+0x2c>)
 8001772:	f002 faf5 	bl	8003d60 <memset>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000e8 	.word	0x200000e8

08001784 <SSD1306_DrawPixel>:
name: SSD1306_DrawPixel
description: function to draw a pixel at a location on the OLED
parameters: x location, y location and the color to fill the pixel with
returns: none
 */
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
 800178e:	460b      	mov	r3, r1
 8001790:	80bb      	strh	r3, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	70fb      	strb	r3, [r7, #3]
	if (
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	2b7f      	cmp	r3, #127	; 0x7f
 800179a:	d848      	bhi.n	800182e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	2b3f      	cmp	r3, #63	; 0x3f
 80017a0:	d845      	bhi.n	800182e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <SSD1306_DrawPixel+0xb8>)
 80017a4:	791b      	ldrb	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d11a      	bne.n	80017f4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017be:	88fa      	ldrh	r2, [r7, #6]
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	b298      	uxth	r0, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	01db      	lsls	r3, r3, #7
 80017ca:	4413      	add	r3, r2
 80017cc:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <SSD1306_DrawPixel+0xbc>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	b25a      	sxtb	r2, r3
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b259      	sxtb	r1, r3
 80017e4:	88fa      	ldrh	r2, [r7, #6]
 80017e6:	4603      	mov	r3, r0
 80017e8:	01db      	lsls	r3, r3, #7
 80017ea:	4413      	add	r3, r2
 80017ec:	b2c9      	uxtb	r1, r1
 80017ee:	4a14      	ldr	r2, [pc, #80]	; (8001840 <SSD1306_DrawPixel+0xbc>)
 80017f0:	54d1      	strb	r1, [r2, r3]
 80017f2:	e01d      	b.n	8001830 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017f4:	88fa      	ldrh	r2, [r7, #6]
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	b298      	uxth	r0, r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	01db      	lsls	r3, r3, #7
 8001800:	4413      	add	r3, r2
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <SSD1306_DrawPixel+0xbc>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	b25a      	sxtb	r2, r3
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	b25b      	sxtb	r3, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4013      	ands	r3, r2
 800181c:	b259      	sxtb	r1, r3
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	4603      	mov	r3, r0
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	4413      	add	r3, r2
 8001826:	b2c9      	uxtb	r1, r1
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <SSD1306_DrawPixel+0xbc>)
 800182a:	54d1      	strb	r1, [r2, r3]
 800182c:	e000      	b.n	8001830 <SSD1306_DrawPixel+0xac>
		return;
 800182e:	bf00      	nop
	}
}
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	200004e8 	.word	0x200004e8
 8001840:	200000e8 	.word	0x200000e8

08001844 <SSD1306_GotoXY>:
name: SSD1306_GotoXY
description: function to go to a particular cordinate on the DDRAM
parameters: x location, y location
returns: none
 */
void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	80fb      	strh	r3, [r7, #6]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001854:	4a05      	ldr	r2, [pc, #20]	; (800186c <SSD1306_GotoXY+0x28>)
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <SSD1306_GotoXY+0x28>)
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	8053      	strh	r3, [r2, #2]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	200004e8 	.word	0x200004e8

08001870 <SSD1306_Putc>:
name: SSD1306_Putc
description: function to put a character on the internal RAM
parameters: character to be printed, font to be used, color of the character
returns: character that was written
 */
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	4613      	mov	r3, r2
 800187e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001880:	4b3a      	ldr	r3, [pc, #232]	; (800196c <SSD1306_Putc+0xfc>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
	if (
 800188c:	2b7f      	cmp	r3, #127	; 0x7f
 800188e:	dc07      	bgt.n	80018a0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <SSD1306_Putc+0xfc>)
 8001892:	885b      	ldrh	r3, [r3, #2]
 8001894:	461a      	mov	r2, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800189c:	2b3f      	cmp	r3, #63	; 0x3f
 800189e:	dd01      	ble.n	80018a4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e05e      	b.n	8001962 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e04b      	b.n	8001942 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	3b20      	subs	r3, #32
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	7849      	ldrb	r1, [r1, #1]
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	440b      	add	r3, r1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	e030      	b.n	8001930 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d010      	beq.n	8001900 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <SSD1306_Putc+0xfc>)
 80018e0:	881a      	ldrh	r2, [r3, #0]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	b298      	uxth	r0, r3
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <SSD1306_Putc+0xfc>)
 80018ec:	885a      	ldrh	r2, [r3, #2]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	79ba      	ldrb	r2, [r7, #6]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff ff43 	bl	8001784 <SSD1306_DrawPixel>
 80018fe:	e014      	b.n	800192a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <SSD1306_Putc+0xfc>)
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4413      	add	r3, r2
 800190a:	b298      	uxth	r0, r3
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <SSD1306_Putc+0xfc>)
 800190e:	885a      	ldrh	r2, [r3, #2]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	b29b      	uxth	r3, r3
 8001914:	4413      	add	r3, r2
 8001916:	b299      	uxth	r1, r3
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf0c      	ite	eq
 800191e:	2301      	moveq	r3, #1
 8001920:	2300      	movne	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	f7ff ff2d 	bl	8001784 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3301      	adds	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4293      	cmp	r3, r2
 800193a:	d3c8      	bcc.n	80018ce <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	785b      	ldrb	r3, [r3, #1]
 8001946:	461a      	mov	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4293      	cmp	r3, r2
 800194c:	d3ad      	bcc.n	80018aa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <SSD1306_Putc+0xfc>)
 8001950:	881a      	ldrh	r2, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4413      	add	r3, r2
 800195a:	b29a      	uxth	r2, r3
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <SSD1306_Putc+0xfc>)
 800195e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001960:	79fb      	ldrb	r3, [r7, #7]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200004e8 	.word	0x200004e8

08001970 <SSD1306_Puts>:
name: SSD1306_Puts
description: function to put a string on the internal RAM
parameters: string to be printed, font to be used, color of the string characters
returns: 0 for success, character for which function failed
 */
char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	4613      	mov	r3, r2
 800197c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800197e:	e012      	b.n	80019a6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	79fa      	ldrb	r2, [r7, #7]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff71 	bl	8001870 <SSD1306_Putc>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d002      	beq.n	80019a0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	e008      	b.n	80019b2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e8      	bne.n	8001980 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	781b      	ldrb	r3, [r3, #0]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <SSD1306_Clear>:
description: function to clear the LCD
parameters: none
returns: none
 */
void SSD1306_Clear (void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff fec8 	bl	8001754 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80019c4:	f7ff fe98 	bl	80016f8 <SSD1306_UpdateScreen>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <ssd1306_I2C_WriteMulti>:
name: ssd1306_I2C_WriteMulti
description: function to write multiple bytes to the slave address
parameters: slave address, register to write to, data to write, count of how many bytes to be written
returns: none
 */
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b0c7      	sub	sp, #284	; 0x11c
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	4604      	mov	r4, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80019da:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80019de:	600a      	str	r2, [r1, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019e6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019ea:	4622      	mov	r2, r4
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019f2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019f6:	4602      	mov	r2, r0
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a02:	460a      	mov	r2, r1
 8001a04:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a12:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001a16:	7812      	ldrb	r2, [r2, #0]
 8001a18:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a20:	e015      	b.n	8001a4e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001a22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a26:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a2a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	441a      	add	r2, r3
 8001a32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a36:	3301      	adds	r3, #1
 8001a38:	7811      	ldrb	r1, [r2, #0]
 8001a3a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a3e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001a42:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a44:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a4e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a58:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001a5c:	8812      	ldrh	r2, [r2, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d8df      	bhi.n	8001a22 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a66:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f107 020c 	add.w	r2, r7, #12
 8001a80:	200a      	movs	r0, #10
 8001a82:	9000      	str	r0, [sp, #0]
 8001a84:	4803      	ldr	r0, [pc, #12]	; (8001a94 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a86:	f000 fd83 	bl	8002590 <HAL_I2C_Master_Transmit>
}
 8001a8a:	bf00      	nop
 8001a8c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	20000030 	.word	0x20000030

08001a98 <ssd1306_I2C_Write>:
name: ssd1306_I2C_Write
description: function to write single byte to the slave address
parameters: slave address, register to write to, data to write
returns: none
 */
void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	71bb      	strb	r3, [r7, #6]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001aaa:	79bb      	ldrb	r3, [r7, #6]
 8001aac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001aae:	797b      	ldrb	r3, [r7, #5]
 8001ab0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	b299      	uxth	r1, r3
 8001ab6:	f107 020c 	add.w	r2, r7, #12
 8001aba:	230a      	movs	r3, #10
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2302      	movs	r3, #2
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <ssd1306_I2C_Write+0x38>)
 8001ac2:	f000 fd65 	bl	8002590 <HAL_I2C_Master_Transmit>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000030 	.word	0x20000030

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_MspInit+0x4c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	; (8001b20 <HAL_MspInit+0x4c>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_MspInit+0x4c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <HAL_MspInit+0x4c>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	; 0x30
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a3a      	ldr	r2, [pc, #232]	; (8001c2c <HAL_I2C_MspInit+0x108>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12c      	bne.n	8001ba0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
 8001b60:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b62:	23c0      	movs	r3, #192	; 0xc0
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b66:	2312      	movs	r3, #18
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b72:	2304      	movs	r3, #4
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	482d      	ldr	r0, [pc, #180]	; (8001c34 <HAL_I2C_MspInit+0x110>)
 8001b7e:	f000 fa3f 	bl	8002000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b9e:	e041      	b.n	8001c24 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <HAL_I2C_MspInit+0x114>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d13c      	bne.n	8001c24 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4814      	ldr	r0, [pc, #80]	; (8001c34 <HAL_I2C_MspInit+0x110>)
 8001be4:	f000 fa0c 	bl	8002000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001be8:	2308      	movs	r3, #8
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <HAL_I2C_MspInit+0x110>)
 8001c04:	f000 f9fc 	bl	8002000 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_I2C_MspInit+0x10c>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3730      	adds	r7, #48	; 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40005400 	.word	0x40005400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40005800 	.word	0x40005800

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c88:	f000 f890 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <SystemInit+0x20>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <SystemInit+0x20>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cba:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd0:	4c0b      	ldr	r4, [pc, #44]	; (8001d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cde:	f7ff ffd7 	bl	8001c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f002 f819 	bl	8003d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce6:	f7ff f933 	bl	8000f50 <main>
  bx  lr    
 8001cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001cf8:	08004b54 	.word	0x08004b54
  ldr r2, =_sbss
 8001cfc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001d00:	200004f4 	.word	0x200004f4

08001d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <HAL_Init+0x40>)
 8001d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <HAL_Init+0x40>)
 8001d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_Init+0x40>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 f931 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d36:	200f      	movs	r0, #15
 8001d38:	f000 f808 	bl	8001d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3c:	f7ff feca 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x54>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x58>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f93b 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00e      	b.n	8001d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b0f      	cmp	r3, #15
 8001d7e:	d80a      	bhi.n	8001d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d80:	2200      	movs	r2, #0
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f000 f911 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <HAL_InitTick+0x5c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000008 	.word	0x20000008
 8001da4:	20000010 	.word	0x20000010
 8001da8:	2000000c 	.word	0x2000000c

08001dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000010 	.word	0x20000010
 8001dd0:	200004f0 	.word	0x200004f0

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200004f0 	.word	0x200004f0

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000010 	.word	0x20000010

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff47 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff5c 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff8e 	bl	8001eec <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffb0 	bl	8001f54 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e159      	b.n	80022d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 8148 	bne.w	80022ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d005      	beq.n	8002052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	2b02      	cmp	r3, #2
 8002050:	d130      	bne.n	80020b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 0201 	and.w	r2, r3, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d017      	beq.n	80020f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d123      	bne.n	8002144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a2 	beq.w	80022ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b57      	ldr	r3, [pc, #348]	; (80022e8 <HAL_GPIO_Init+0x2e8>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a56      	ldr	r2, [pc, #344]	; (80022e8 <HAL_GPIO_Init+0x2e8>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b54      	ldr	r3, [pc, #336]	; (80022e8 <HAL_GPIO_Init+0x2e8>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_GPIO_Init+0x2ec>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a49      	ldr	r2, [pc, #292]	; (80022f0 <HAL_GPIO_Init+0x2f0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x202>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a48      	ldr	r2, [pc, #288]	; (80022f4 <HAL_GPIO_Init+0x2f4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x1fe>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a47      	ldr	r2, [pc, #284]	; (80022f8 <HAL_GPIO_Init+0x2f8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x1fa>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a46      	ldr	r2, [pc, #280]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x1f6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a45      	ldr	r2, [pc, #276]	; (8002300 <HAL_GPIO_Init+0x300>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x1f2>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e008      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e004      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_GPIO_Init+0x204>
 8002202:	2300      	movs	r3, #0
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f002 0203 	and.w	r2, r2, #3
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4093      	lsls	r3, r2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002214:	4935      	ldr	r1, [pc, #212]	; (80022ec <HAL_GPIO_Init+0x2ec>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_GPIO_Init+0x304>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002246:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <HAL_GPIO_Init+0x304>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_GPIO_Init+0x304>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002270:	4a24      	ldr	r2, [pc, #144]	; (8002304 <HAL_GPIO_Init+0x304>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002276:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_GPIO_Init+0x304>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800229a:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <HAL_GPIO_Init+0x304>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a0:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_GPIO_Init+0x304>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c4:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <HAL_GPIO_Init+0x304>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f aea2 	bls.w	800201c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e12b      	b.n	8002572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fbf8 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2224      	movs	r2, #36	; 0x24
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800236c:	f001 fcc0 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8002370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4a81      	ldr	r2, [pc, #516]	; (800257c <HAL_I2C_Init+0x274>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d807      	bhi.n	800238c <HAL_I2C_Init+0x84>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a80      	ldr	r2, [pc, #512]	; (8002580 <HAL_I2C_Init+0x278>)
 8002380:	4293      	cmp	r3, r2
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e006      	b.n	800239a <HAL_I2C_Init+0x92>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4a7d      	ldr	r2, [pc, #500]	; (8002584 <HAL_I2C_Init+0x27c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	bf94      	ite	ls
 8002394:	2301      	movls	r3, #1
 8002396:	2300      	movhi	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0e7      	b.n	8002572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a78      	ldr	r2, [pc, #480]	; (8002588 <HAL_I2C_Init+0x280>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0c9b      	lsrs	r3, r3, #18
 80023ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_I2C_Init+0x274>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d802      	bhi.n	80023dc <HAL_I2C_Init+0xd4>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3301      	adds	r3, #1
 80023da:	e009      	b.n	80023f0 <HAL_I2C_Init+0xe8>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	4a69      	ldr	r2, [pc, #420]	; (800258c <HAL_I2C_Init+0x284>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	3301      	adds	r3, #1
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	495c      	ldr	r1, [pc, #368]	; (800257c <HAL_I2C_Init+0x274>)
 800240c:	428b      	cmp	r3, r1
 800240e:	d819      	bhi.n	8002444 <HAL_I2C_Init+0x13c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e59      	subs	r1, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fbb1 f3f3 	udiv	r3, r1, r3
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002424:	400b      	ands	r3, r1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_I2C_Init+0x138>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e59      	subs	r1, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fbb1 f3f3 	udiv	r3, r1, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243e:	e051      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 8002440:	2304      	movs	r3, #4
 8002442:	e04f      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d111      	bne.n	8002470 <HAL_I2C_Init+0x168>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1e58      	subs	r0, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	440b      	add	r3, r1
 800245a:	fbb0 f3f3 	udiv	r3, r0, r3
 800245e:	3301      	adds	r3, #1
 8002460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e012      	b.n	8002496 <HAL_I2C_Init+0x18e>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e58      	subs	r0, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	0099      	lsls	r1, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Init+0x196>
 800249a:	2301      	movs	r3, #1
 800249c:	e022      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10e      	bne.n	80024c4 <HAL_I2C_Init+0x1bc>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1e58      	subs	r0, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	440b      	add	r3, r1
 80024b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c2:	e00f      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e58      	subs	r0, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	0099      	lsls	r1, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	6809      	ldr	r1, [r1, #0]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6911      	ldr	r1, [r2, #16]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	4311      	orrs	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	430b      	orrs	r3, r1
 8002526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	000186a0 	.word	0x000186a0
 8002580:	001e847f 	.word	0x001e847f
 8002584:	003d08ff 	.word	0x003d08ff
 8002588:	431bde83 	.word	0x431bde83
 800258c:	10624dd3 	.word	0x10624dd3

08002590 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	4613      	mov	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff fc16 	bl	8001dd4 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 80e0 	bne.w	8002778 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2319      	movs	r3, #25
 80025be:	2201      	movs	r2, #1
 80025c0:	4970      	ldr	r1, [pc, #448]	; (8002784 <HAL_I2C_Master_Transmit+0x1f4>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fd86 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0d3      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x50>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0cc      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d007      	beq.n	8002606 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002614:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2221      	movs	r2, #33	; 0x21
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2210      	movs	r2, #16
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	893a      	ldrh	r2, [r7, #8]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a50      	ldr	r2, [pc, #320]	; (8002788 <HAL_I2C_Master_Transmit+0x1f8>)
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fbf0 	bl	8002e34 <I2C_MasterRequestWrite>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e08d      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002674:	e066      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6a39      	ldr	r1, [r7, #32]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fe00 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b04      	cmp	r3, #4
 800268c:	d107      	bne.n	800269e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06b      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d11b      	bne.n	8002718 <HAL_I2C_Master_Transmit+0x188>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d017      	beq.n	8002718 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	6a39      	ldr	r1, [r7, #32]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fdf0 	bl	8003302 <I2C_WaitOnBTFFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2b04      	cmp	r3, #4
 800272e:	d107      	bne.n	8002740 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e01a      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d194      	bne.n	8002676 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	00100002 	.word	0x00100002
 8002788:	ffff0000 	.word	0xffff0000

0800278c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	461a      	mov	r2, r3
 8002798:	460b      	mov	r3, r1
 800279a:	817b      	strh	r3, [r7, #10]
 800279c:	4613      	mov	r3, r2
 800279e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff fb18 	bl	8001dd4 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	f040 820b 	bne.w	8002bca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2319      	movs	r3, #25
 80027ba:	2201      	movs	r2, #1
 80027bc:	497c      	ldr	r1, [pc, #496]	; (80029b0 <HAL_I2C_Master_Receive+0x224>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fc88 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e1fe      	b.n	8002bcc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_I2C_Master_Receive+0x50>
 80027d8:	2302      	movs	r3, #2
 80027da:	e1f7      	b.n	8002bcc <HAL_I2C_Master_Receive+0x440>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d007      	beq.n	8002802 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002810:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2222      	movs	r2, #34	; 0x22
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2210      	movs	r2, #16
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	893a      	ldrh	r2, [r7, #8]
 8002832:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4a5c      	ldr	r2, [pc, #368]	; (80029b4 <HAL_I2C_Master_Receive+0x228>)
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fb74 	bl	8002f38 <I2C_MasterRequestRead>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e1b8      	b.n	8002bcc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	d113      	bne.n	800288a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	623b      	str	r3, [r7, #32]
 8002876:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e18c      	b.n	8002ba4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	2b01      	cmp	r3, #1
 8002890:	d11b      	bne.n	80028ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e16c      	b.n	8002ba4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d11b      	bne.n	800290a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	e14c      	b.n	8002ba4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002930:	e138      	b.n	8002ba4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	2b03      	cmp	r3, #3
 8002938:	f200 80f1 	bhi.w	8002b1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	2b01      	cmp	r3, #1
 8002942:	d123      	bne.n	800298c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fd1b 	bl	8003384 <I2C_WaitOnRXNEFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e139      	b.n	8002bcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a
 800298a:	e10b      	b.n	8002ba4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	2b02      	cmp	r3, #2
 8002992:	d14e      	bne.n	8002a32 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	2200      	movs	r2, #0
 800299c:	4906      	ldr	r1, [pc, #24]	; (80029b8 <HAL_I2C_Master_Receive+0x22c>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fb98 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e10e      	b.n	8002bcc <HAL_I2C_Master_Receive+0x440>
 80029ae:	bf00      	nop
 80029b0:	00100002 	.word	0x00100002
 80029b4:	ffff0000 	.word	0xffff0000
 80029b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a30:	e0b8      	b.n	8002ba4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4966      	ldr	r1, [pc, #408]	; (8002bd4 <HAL_I2C_Master_Receive+0x448>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fb49 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0bf      	b.n	8002bcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2200      	movs	r2, #0
 8002a96:	494f      	ldr	r1, [pc, #316]	; (8002bd4 <HAL_I2C_Master_Receive+0x448>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fb1b 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e091      	b.n	8002bcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b1c:	e042      	b.n	8002ba4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fc2e 	bl	8003384 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e04c      	b.n	8002bcc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d118      	bne.n	8002ba4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f47f aec2 	bne.w	8002932 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
  }
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	00010004 	.word	0x00010004

08002bd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	460b      	mov	r3, r1
 8002be6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002be8:	f7ff f8f4 	bl	8001dd4 <HAL_GetTick>
 8002bec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	f040 8111 	bne.w	8002e22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2319      	movs	r3, #25
 8002c06:	2201      	movs	r2, #1
 8002c08:	4988      	ldr	r1, [pc, #544]	; (8002e2c <HAL_I2C_IsDeviceReady+0x254>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fa62 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
 8002c18:	e104      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_I2C_IsDeviceReady+0x50>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e0fd      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d007      	beq.n	8002c4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2224      	movs	r2, #36	; 0x24
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a70      	ldr	r2, [pc, #448]	; (8002e30 <HAL_I2C_IsDeviceReady+0x258>)
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fa20 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca8:	d103      	bne.n	8002cb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0b6      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cc4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7ff f885 	bl	8001dd4 <HAL_GetTick>
 8002cca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cfa:	e025      	b.n	8002d48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7ff f86a 	bl	8001dd4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <HAL_I2C_IsDeviceReady+0x13a>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	22a0      	movs	r2, #160	; 0xa0
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2ba0      	cmp	r3, #160	; 0xa0
 8002d52:	d005      	beq.n	8002d60 <HAL_I2C_IsDeviceReady+0x188>
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_I2C_IsDeviceReady+0x188>
 8002d5a:	7dbb      	ldrb	r3, [r7, #22]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0cd      	beq.n	8002cfc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d129      	bne.n	8002dca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2319      	movs	r3, #25
 8002da2:	2201      	movs	r2, #1
 8002da4:	4921      	ldr	r1, [pc, #132]	; (8002e2c <HAL_I2C_IsDeviceReady+0x254>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f994 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e036      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e02c      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002de2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2319      	movs	r3, #25
 8002dea:	2201      	movs	r2, #1
 8002dec:	490f      	ldr	r1, [pc, #60]	; (8002e2c <HAL_I2C_IsDeviceReady+0x254>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f970 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e012      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f4ff af32 	bcc.w	8002c72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	00100002 	.word	0x00100002
 8002e30:	ffff0000 	.word	0xffff0000

08002e34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d006      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d003      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e5c:	d108      	bne.n	8002e70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e00b      	b.n	8002e88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d107      	bne.n	8002e88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f91d 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eae:	d103      	bne.n	8002eb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e035      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ec4:	d108      	bne.n	8002ed8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed4:	611a      	str	r2, [r3, #16]
 8002ed6:	e01b      	b.n	8002f10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	11db      	asrs	r3, r3, #7
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 0306 	and.w	r3, r3, #6
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f063 030f 	orn	r3, r3, #15
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	490e      	ldr	r1, [pc, #56]	; (8002f30 <I2C_MasterRequestWrite+0xfc>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f943 	bl	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e010      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <I2C_MasterRequestWrite+0x100>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f933 	bl	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	00010008 	.word	0x00010008
 8002f34:	00010002 	.word	0x00010002

08002f38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d006      	beq.n	8002f72 <I2C_MasterRequestRead+0x3a>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d003      	beq.n	8002f72 <I2C_MasterRequestRead+0x3a>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f70:	d108      	bne.n	8002f84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e00b      	b.n	8002f9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	2b11      	cmp	r3, #17
 8002f8a:	d107      	bne.n	8002f9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f893 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00d      	beq.n	8002fd0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc2:	d103      	bne.n	8002fcc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e079      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd8:	d108      	bne.n	8002fec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	e05f      	b.n	80030ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fec:	897b      	ldrh	r3, [r7, #10]
 8002fee:	11db      	asrs	r3, r3, #7
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 0306 	and.w	r3, r3, #6
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f063 030f 	orn	r3, r3, #15
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4930      	ldr	r1, [pc, #192]	; (80030cc <I2C_MasterRequestRead+0x194>)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f8b9 	bl	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e054      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4929      	ldr	r1, [pc, #164]	; (80030d0 <I2C_MasterRequestRead+0x198>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f8a9 	bl	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e044      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f831 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003086:	d103      	bne.n	8003090 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e017      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003094:	897b      	ldrh	r3, [r7, #10]
 8003096:	11db      	asrs	r3, r3, #7
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0306 	and.w	r3, r3, #6
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f063 030e 	orn	r3, r3, #14
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4907      	ldr	r1, [pc, #28]	; (80030d0 <I2C_MasterRequestRead+0x198>)
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f865 	bl	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	00010008 	.word	0x00010008
 80030d0:	00010002 	.word	0x00010002

080030d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e4:	e025      	b.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d021      	beq.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe fe71 	bl	8001dd4 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d116      	bne.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e023      	b.n	800317a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d10d      	bne.n	8003158 <I2C_WaitOnFlagUntilTimeout+0x84>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	43da      	mvns	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4013      	ands	r3, r2
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf0c      	ite	eq
 800314e:	2301      	moveq	r3, #1
 8003150:	2300      	movne	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	e00c      	b.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4013      	ands	r3, r2
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf0c      	ite	eq
 800316a:	2301      	moveq	r3, #1
 800316c:	2300      	movne	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	429a      	cmp	r2, r3
 8003176:	d0b6      	beq.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003190:	e051      	b.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a0:	d123      	bne.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f043 0204 	orr.w	r2, r3, #4
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e046      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d021      	beq.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f7fe fdef 	bl	8001dd4 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d116      	bne.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0220 	orr.w	r2, r3, #32
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e020      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d10c      	bne.n	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf14      	ite	ne
 8003252:	2301      	movne	r3, #1
 8003254:	2300      	moveq	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	e00b      	b.n	8003272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	43da      	mvns	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4013      	ands	r3, r2
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d18d      	bne.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800328c:	e02d      	b.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f8ce 	bl	8003430 <I2C_IsAcknowledgeFailed>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e02d      	b.n	80032fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d021      	beq.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fe fd95 	bl	8001dd4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d116      	bne.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f043 0220 	orr.w	r2, r3, #32
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e007      	b.n	80032fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d1ca      	bne.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800330e:	e02d      	b.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f88d 	bl	8003430 <I2C_IsAcknowledgeFailed>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e02d      	b.n	800337c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d021      	beq.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fe fd54 	bl	8001dd4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e007      	b.n	800337c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b04      	cmp	r3, #4
 8003378:	d1ca      	bne.n	8003310 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003390:	e042      	b.n	8003418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b10      	cmp	r3, #16
 800339e:	d119      	bne.n	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0210 	mvn.w	r2, #16
 80033a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e029      	b.n	8003428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7fe fcfe 	bl	8001dd4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d116      	bne.n	8003418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e007      	b.n	8003428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d1b5      	bne.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003446:	d11b      	bne.n	8003480 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003450:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f043 0204 	orr.w	r2, r3, #4
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e267      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d075      	beq.n	800359a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ae:	4b88      	ldr	r3, [pc, #544]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d00c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ba:	4b85      	ldr	r3, [pc, #532]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d112      	bne.n	80034ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c6:	4b82      	ldr	r3, [pc, #520]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d2:	d10b      	bne.n	80034ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	4b7e      	ldr	r3, [pc, #504]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d05b      	beq.n	8003598 <HAL_RCC_OscConfig+0x108>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d157      	bne.n	8003598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e242      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d106      	bne.n	8003504 <HAL_RCC_OscConfig+0x74>
 80034f6:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a75      	ldr	r2, [pc, #468]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e01d      	b.n	8003540 <HAL_RCC_OscConfig+0xb0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x98>
 800350e:	4b70      	ldr	r3, [pc, #448]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6f      	ldr	r2, [pc, #444]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6c      	ldr	r2, [pc, #432]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0xb0>
 8003528:	4b69      	ldr	r3, [pc, #420]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a68      	ldr	r2, [pc, #416]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800352e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b66      	ldr	r3, [pc, #408]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a65      	ldr	r2, [pc, #404]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe fc44 	bl	8001dd4 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003550:	f7fe fc40 	bl	8001dd4 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e207      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b5b      	ldr	r3, [pc, #364]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0xc0>
 800356e:	e014      	b.n	800359a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fc30 	bl	8001dd4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe fc2c 	bl	8001dd4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	; 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e1f3      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	4b51      	ldr	r3, [pc, #324]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0xe8>
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d063      	beq.n	800366e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a6:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b2:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d11c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035be:	4b44      	ldr	r3, [pc, #272]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d116      	bne.n	80035f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ca:	4b41      	ldr	r3, [pc, #260]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_RCC_OscConfig+0x152>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e1c7      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e2:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4937      	ldr	r1, [pc, #220]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f6:	e03a      	b.n	800366e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003600:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCC_OscConfig+0x244>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fe fbe5 	bl	8001dd4 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360e:	f7fe fbe1 	bl	8001dd4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e1a8      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003620:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362c:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4925      	ldr	r1, [pc, #148]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]
 8003640:	e015      	b.n	800366e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_OscConfig+0x244>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe fbc4 	bl	8001dd4 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003650:	f7fe fbc0 	bl	8001dd4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e187      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d036      	beq.n	80036e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_RCC_OscConfig+0x248>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe fba4 	bl	8001dd4 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003690:	f7fe fba0 	bl	8001dd4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e167      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_OscConfig+0x240>)
 80036a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x200>
 80036ae:	e01b      	b.n	80036e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_OscConfig+0x248>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b6:	f7fe fb8d 	bl	8001dd4 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036bc:	e00e      	b.n	80036dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036be:	f7fe fb89 	bl	8001dd4 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d907      	bls.n	80036dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e150      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
 80036d0:	40023800 	.word	0x40023800
 80036d4:	42470000 	.word	0x42470000
 80036d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036dc:	4b88      	ldr	r3, [pc, #544]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ea      	bne.n	80036be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8097 	beq.w	8003824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fa:	4b81      	ldr	r3, [pc, #516]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	4b7d      	ldr	r3, [pc, #500]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a7c      	ldr	r2, [pc, #496]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b7a      	ldr	r3, [pc, #488]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003726:	4b77      	ldr	r3, [pc, #476]	; (8003904 <HAL_RCC_OscConfig+0x474>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d118      	bne.n	8003764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003732:	4b74      	ldr	r3, [pc, #464]	; (8003904 <HAL_RCC_OscConfig+0x474>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a73      	ldr	r2, [pc, #460]	; (8003904 <HAL_RCC_OscConfig+0x474>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373e:	f7fe fb49 	bl	8001dd4 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003746:	f7fe fb45 	bl	8001dd4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e10c      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <HAL_RCC_OscConfig+0x474>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d106      	bne.n	800377a <HAL_RCC_OscConfig+0x2ea>
 800376c:	4b64      	ldr	r3, [pc, #400]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a63      	ldr	r2, [pc, #396]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
 8003778:	e01c      	b.n	80037b4 <HAL_RCC_OscConfig+0x324>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x30c>
 8003782:	4b5f      	ldr	r3, [pc, #380]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	4a5e      	ldr	r2, [pc, #376]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003788:	f043 0304 	orr.w	r3, r3, #4
 800378c:	6713      	str	r3, [r2, #112]	; 0x70
 800378e:	4b5c      	ldr	r3, [pc, #368]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a5b      	ldr	r2, [pc, #364]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0x324>
 800379c:	4b58      	ldr	r3, [pc, #352]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a57      	ldr	r2, [pc, #348]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	4b55      	ldr	r3, [pc, #340]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a54      	ldr	r2, [pc, #336]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80037ae:	f023 0304 	bic.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d015      	beq.n	80037e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe fb0a 	bl	8001dd4 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fe fb06 	bl	8001dd4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0cb      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0ee      	beq.n	80037c4 <HAL_RCC_OscConfig+0x334>
 80037e6:	e014      	b.n	8003812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e8:	f7fe faf4 	bl	8001dd4 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f0:	f7fe faf0 	bl	8001dd4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e0b5      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003806:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1ee      	bne.n	80037f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003818:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	4a38      	ldr	r2, [pc, #224]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80a1 	beq.w	8003970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800382e:	4b34      	ldr	r3, [pc, #208]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b08      	cmp	r3, #8
 8003838:	d05c      	beq.n	80038f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d141      	bne.n	80038c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	4b31      	ldr	r3, [pc, #196]	; (8003908 <HAL_RCC_OscConfig+0x478>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fe fac4 	bl	8001dd4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003850:	f7fe fac0 	bl	8001dd4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e087      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	4b27      	ldr	r3, [pc, #156]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	041b      	lsls	r3, r3, #16
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	491b      	ldr	r1, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <HAL_RCC_OscConfig+0x478>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fe fa99 	bl	8001dd4 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a6:	f7fe fa95 	bl	8001dd4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e05c      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x416>
 80038c4:	e054      	b.n	8003970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <HAL_RCC_OscConfig+0x478>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fe fa82 	bl	8001dd4 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fe fa7e 	bl	8001dd4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e045      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_RCC_OscConfig+0x470>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x444>
 80038f2:	e03d      	b.n	8003970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d107      	bne.n	800390c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e038      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
 8003900:	40023800 	.word	0x40023800
 8003904:	40007000 	.word	0x40007000
 8003908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x4ec>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d028      	beq.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d121      	bne.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d11a      	bne.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800393c:	4013      	ands	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003944:	4293      	cmp	r3, r2
 8003946:	d111      	bne.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	3b01      	subs	r3, #1
 8003956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d107      	bne.n	800396c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800

08003980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0cc      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d90c      	bls.n	80039bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b63      	ldr	r3, [pc, #396]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0b8      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d4:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039ec:	4b53      	ldr	r3, [pc, #332]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4a52      	ldr	r2, [pc, #328]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b50      	ldr	r3, [pc, #320]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	494d      	ldr	r1, [pc, #308]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d044      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d119      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e07f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e06f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4e:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e067      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5e:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 0203 	bic.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4934      	ldr	r1, [pc, #208]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a70:	f7fe f9b0 	bl	8001dd4 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fe f9ac 	bl	8001dd4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e04f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 020c 	and.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1eb      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d20c      	bcs.n	8003ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e032      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4916      	ldr	r1, [pc, #88]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	490e      	ldr	r1, [pc, #56]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b06:	f000 f821 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	490a      	ldr	r1, [pc, #40]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	5ccb      	ldrb	r3, [r1, r3]
 8003b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1c8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe f910 	bl	8001d4c <HAL_InitTick>

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023c00 	.word	0x40023c00
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	08004b2c 	.word	0x08004b2c
 8003b44:	20000008 	.word	0x20000008
 8003b48:	2000000c 	.word	0x2000000c

08003b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b50:	b090      	sub	sp, #64	; 0x40
 8003b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 8003b58:	2300      	movs	r3, #0
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b64:	4b59      	ldr	r3, [pc, #356]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d00d      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x40>
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	f200 80a1 	bhi.w	8003cb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x34>
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b7e:	e09b      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b84:	e09b      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b86:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b8a:	e098      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b96:	4b4d      	ldr	r3, [pc, #308]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d028      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	2200      	movs	r2, #0
 8003baa:	623b      	str	r3, [r7, #32]
 8003bac:	627a      	str	r2, [r7, #36]	; 0x24
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb8:	fb03 f201 	mul.w	r2, r3, r1
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	fb00 f303 	mul.w	r3, r0, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	4a43      	ldr	r2, [pc, #268]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bc6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bcc:	460a      	mov	r2, r1
 8003bce:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd2:	4413      	add	r3, r2
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	2200      	movs	r2, #0
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	61fa      	str	r2, [r7, #28]
 8003bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003be6:	f7fc ff6d 	bl	8000ac4 <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4613      	mov	r3, r2
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf2:	e053      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf4:	4b35      	ldr	r3, [pc, #212]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	617a      	str	r2, [r7, #20]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c06:	f04f 0b00 	mov.w	fp, #0
 8003c0a:	4652      	mov	r2, sl
 8003c0c:	465b      	mov	r3, fp
 8003c0e:	f04f 0000 	mov.w	r0, #0
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	0159      	lsls	r1, r3, #5
 8003c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c1c:	0150      	lsls	r0, r2, #5
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	ebb2 080a 	subs.w	r8, r2, sl
 8003c26:	eb63 090b 	sbc.w	r9, r3, fp
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c3e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c42:	eb63 0509 	sbc.w	r5, r3, r9
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	00eb      	lsls	r3, r5, #3
 8003c50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c54:	00e2      	lsls	r2, r4, #3
 8003c56:	4614      	mov	r4, r2
 8003c58:	461d      	mov	r5, r3
 8003c5a:	eb14 030a 	adds.w	r3, r4, sl
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	eb45 030b 	adc.w	r3, r5, fp
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c72:	4629      	mov	r1, r5
 8003c74:	028b      	lsls	r3, r1, #10
 8003c76:	4621      	mov	r1, r4
 8003c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	028a      	lsls	r2, r1, #10
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	2200      	movs	r2, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	60fa      	str	r2, [r7, #12]
 8003c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c90:	f7fc ff18 	bl	8000ac4 <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4613      	mov	r3, r2
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3740      	adds	r7, #64	; 0x40
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	017d7840 	.word	0x017d7840

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000008 	.word	0x20000008

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a9b      	lsrs	r3, r3, #10
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	08004b3c 	.word	0x08004b3c

08003d18 <__libc_init_array>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	4d0d      	ldr	r5, [pc, #52]	; (8003d50 <__libc_init_array+0x38>)
 8003d1c:	4c0d      	ldr	r4, [pc, #52]	; (8003d54 <__libc_init_array+0x3c>)
 8003d1e:	1b64      	subs	r4, r4, r5
 8003d20:	10a4      	asrs	r4, r4, #2
 8003d22:	2600      	movs	r6, #0
 8003d24:	42a6      	cmp	r6, r4
 8003d26:	d109      	bne.n	8003d3c <__libc_init_array+0x24>
 8003d28:	4d0b      	ldr	r5, [pc, #44]	; (8003d58 <__libc_init_array+0x40>)
 8003d2a:	4c0c      	ldr	r4, [pc, #48]	; (8003d5c <__libc_init_array+0x44>)
 8003d2c:	f000 f820 	bl	8003d70 <_init>
 8003d30:	1b64      	subs	r4, r4, r5
 8003d32:	10a4      	asrs	r4, r4, #2
 8003d34:	2600      	movs	r6, #0
 8003d36:	42a6      	cmp	r6, r4
 8003d38:	d105      	bne.n	8003d46 <__libc_init_array+0x2e>
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d40:	4798      	blx	r3
 8003d42:	3601      	adds	r6, #1
 8003d44:	e7ee      	b.n	8003d24 <__libc_init_array+0xc>
 8003d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4a:	4798      	blx	r3
 8003d4c:	3601      	adds	r6, #1
 8003d4e:	e7f2      	b.n	8003d36 <__libc_init_array+0x1e>
 8003d50:	08004b4c 	.word	0x08004b4c
 8003d54:	08004b4c 	.word	0x08004b4c
 8003d58:	08004b4c 	.word	0x08004b4c
 8003d5c:	08004b50 	.word	0x08004b50

08003d60 <memset>:
 8003d60:	4402      	add	r2, r0
 8003d62:	4603      	mov	r3, r0
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d100      	bne.n	8003d6a <memset+0xa>
 8003d68:	4770      	bx	lr
 8003d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d6e:	e7f9      	b.n	8003d64 <memset+0x4>

08003d70 <_init>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr

08003d7c <_fini>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr
